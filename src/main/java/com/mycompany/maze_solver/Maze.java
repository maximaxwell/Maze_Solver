package com.mycompany.maze_solver;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.LinkedList;
import javax.swing.SwingWorker;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author maxwe
 */
public class Maze extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Maze.class.getName());
    private Grid grid = new Grid();
    private boolean startVariablesSelected = true;
    private boolean endVariablesSelected = true;
    private boolean createWall = false;
    private Coord start = new Coord();
    private Coord end = new Coord();
    long elapsedTime = 0;
    long startTime = 0;
    Coord previous = null;
    boolean stop = false;
    private SwingWorker<Void, Coord> worker;
    private BFS bfs = null;
    private DFS dfs = null;
    private AStar aStar = null;
    private int finalCost = 0;
    private int[][] startingLayout;

    /**
     * Creates new form Maze
     */
    public Maze() {
        initComponents();
        getMainPanel().setLayout(new java.awt.BorderLayout()); // so Grid fills space
        getMainPanel().add(grid, java.awt.BorderLayout.CENTER);
        mouseListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        randomiseButton = new javax.swing.JButton();
        selectBox = new javax.swing.JComboBox<>();
        selectLabel = new javax.swing.JLabel();
        solveButton = new javax.swing.JButton();
        costSlider = new javax.swing.JSlider();
        costLabel = new javax.swing.JLabel();
        wallToggleButton = new javax.swing.JToggleButton();
        timeSlider = new javax.swing.JSlider();
        clearButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        randomiseCostButton = new javax.swing.JButton();
        totalCostLabel = new javax.swing.JLabel();
        delayLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 500));

        randomiseButton.setText("Randomise");
        randomiseButton.setToolTipText("");
        randomiseButton.setFocusPainted(false);
        randomiseButton.setFocusable(false);
        randomiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomiseButtonActionPerformed(evt);
            }
        });

        selectBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A*", "BFS", "DFS" }));

        selectLabel.setBackground(new java.awt.Color(255, 255, 255));
        selectLabel.setForeground(new java.awt.Color(0, 0, 0));
        selectLabel.setText("Select a searching algorithm");

        solveButton.setText("Solve");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        costSlider.setMaximum(9);
        costSlider.setValue(0);
        costSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                costTextChanger(evt);
            }
        });

        costLabel.setBackground(new java.awt.Color(255, 255, 255));
        costLabel.setForeground(new java.awt.Color(0, 0, 0));
        costLabel.setText("Cost: 0");

        wallToggleButton.setText("Weighted path");
        wallToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wallToggleButtonActionPerformed(evt);
            }
        });

        timeSlider.setMaximum(500);
        timeSlider.setValue(100);
        timeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                delayLabelChanger(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        randomiseCostButton.setText("Randomise Cost");
        randomiseCostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomiseCostButtonActionPerformed(evt);
            }
        });

        totalCostLabel.setBackground(new java.awt.Color(255, 255, 255));
        totalCostLabel.setForeground(new java.awt.Color(0, 0, 0));
        totalCostLabel.setText("Final cost:");

        delayLabel.setBackground(new java.awt.Color(255, 255, 255));
        delayLabel.setForeground(new java.awt.Color(0, 0, 0));
        delayLabel.setText("Delay: 100ms");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(513, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(selectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(randomiseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(solveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(costSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(costLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wallToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(randomiseCostButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalCostLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(selectLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totalCostLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(selectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(solveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(randomiseButton)
                .addGap(18, 18, 18)
                .addComponent(costSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(costLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wallToggleButton)
                .addGap(18, 18, 18)
                .addComponent(timeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delayLabel)
                .addGap(10, 10, 10)
                .addComponent(clearButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopButton)
                    .addComponent(startButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(randomiseCostButton)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void randomiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomiseButtonActionPerformed
        /*
        Maze maze = new Maze();
        maze.getMainPanel().setLayout(new java.awt.BorderLayout()); // so Grid fills space
        maze.getMainPanel().add(grid, java.awt.BorderLayout.CENTER);
        maze.pack();
        maze.setVisible(true);
        this.dispose();
         */
        jPanel1.remove(this.grid);
        this.grid = new Grid();
        jPanel1.add(this.grid, java.awt.BorderLayout.CENTER);
        this.revalidate();
        this.repaint();
        startingLayout = this.grid.getGridLayout();
    }//GEN-LAST:event_randomiseButtonActionPerformed

    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        if (startingLayout != null) {
            jPanel1.remove(this.grid);
            int[][] layout = copy2DArray(startingLayout);
            for (int i = 0; i < layout.length; i++) {
                for (int j = 0; j < layout[0].length; j++) {
                    if (layout[j][i] == -1 || layout[j][i] == -2 || layout[j][i] == -3 || layout[j][i] == -4 || layout[j][i] == -5) {
                        layout[j][i] = 0;
                    }
                }
            }
            this.grid.setGridLayout(layout);
            jPanel1.add(this.grid, java.awt.BorderLayout.CENTER);
            this.revalidate();
            this.repaint();
        }
        stop = false;
        startVariablesSelected = false;
        endVariablesSelected = false;
        start.reset();
        end.reset();
        selectLabel.setText("Select a starting point.");
    }//GEN-LAST:event_solveButtonActionPerformed

    private void costTextChanger(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_costTextChanger
        // TODO add your handling code here:
        costLabel.setText("Cost: " + costSlider.getValue());
    }//GEN-LAST:event_costTextChanger

    private void wallToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wallToggleButtonActionPerformed
        // TODO add your handling code here:
        if (wallToggleButton.getText().equals("Wall")) {
            wallToggleButton.setText("Weighted path");
            createWall = false;
        } else {
            wallToggleButton.setText("Wall");
            createWall = true;
        }
    }//GEN-LAST:event_wallToggleButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        jPanel1.remove(this.grid);
        int[][] layout = this.grid.getGridLayout();
        for (int i = 0; i < layout.length; i++) {
            for (int j = 0; j < layout[0].length; j++) {
                if (layout[j][i] == -1 || layout[j][i] == -2 || layout[j][i] == -3 || layout[j][i] == -4 || layout[j][i] > 1 || layout[j][i] == -5) {
                    layout[j][i] = 0;
                }
            }
        }
        this.grid.setGridLayout(layout);
        jPanel1.add(this.grid, java.awt.BorderLayout.CENTER);
        this.revalidate();
        this.repaint();
        startingLayout = layout;
    }//GEN-LAST:event_clearButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
    }//GEN-LAST:event_stopButtonActionPerformed

    private void randomiseCostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomiseCostButtonActionPerformed
        // TODO add your handling code here:
        jPanel1.remove(this.grid);
        double random = 0;
        int[][] layout = this.grid.getGridLayout();
        for (int i = 0; i < layout.length; i++) {
            for (int j = 0; j < layout[0].length; j++) {
                if (layout[j][i] > 1 | layout[j][i] == 0) {
                    random = Math.round(Math.random() * 10);
                    while (random == 1) {
                        random = Math.round(Math.random() * 10);
                    }
                    layout[j][i] = (int) random;
                }
            }
        }
        this.grid.setGridLayout(layout);
        jPanel1.add(this.grid, java.awt.BorderLayout.CENTER);
        this.revalidate();
        this.repaint();
        startingLayout = layout;
    }//GEN-LAST:event_randomiseCostButtonActionPerformed

    private void delayLabelChanger(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_delayLabelChanger
        // TODO add your handling code here:
        delayLabel.setText("Delay: " + timeSlider.getValue() + "ms");
    }//GEN-LAST:event_delayLabelChanger

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Maze().setVisible(true));
    }

    public javax.swing.JPanel getMainPanel() {
        return jPanel1;
    }

    public Grid getGrid() {
        return grid;
    }

    public void setGrid(Grid grid) {
        this.grid = grid;
    }

    public void mouseListener() {
        GridHandler handler = new GridHandler(this.grid);
        this.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!Maze.this.grid.getBounds().contains(e.getX(), e.getY())) {
                    return; // ignore clicks outside grid
                }
                Grid newGrid = Maze.this.grid;
                if (startVariablesSelected == false) {
                    newGrid = handler.setValueFromMouseClick(grid, e.getX(), e.getY(), -3);
                    refreshGridWithNew(newGrid);
                    selectLabel.setText("Select an end point.");
                    startVariablesSelected = true;
                    start = newGrid.getStartPoint();
                    return;
                } else if (endVariablesSelected == false) {
                    newGrid = handler.setValueFromMouseClick(grid, e.getX(), e.getY(), -4);
                    refreshGridWithNew(newGrid);
                    endVariablesSelected = true;
                    end = newGrid.getEndPoint();
                    selectLabel.setText("Solving...");
                    startTime = System.currentTimeMillis();
                    startingLayout = copy2DArray(newGrid.getGridLayout());
                    runSolver();
                    return;
                } else if (costSlider.getValue() != 0 && createWall == false) {
                    newGrid = handler.setValueFromMouseClick(grid, e.getX(), e.getY(), costSlider.getValue() + 1);
                } else {
                    newGrid = handler.toggleWallFromMouseClick(grid, e.getX(), e.getY());
                }
                refreshGridWithNew(newGrid);
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }

        }
        );
    }

    private void runSolver() {
        String selected = selectBox.getSelectedItem().toString();
        worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() {
                if ("BFS".equals(selected)) {
                    bfs = new BFS(grid);
                    Coord current = start;
                    Coord stepped;
                    while (!current.equals(end) && !current.equals(new Coord(-1, -1)) && !stop) {
                        stepped = bfs.step();
                        if (stepped == null) {
                            continue;
                        }
                        publish(stepped);
                        current = stepped;
                        try {
                            Thread.sleep(timeSlider.getValue());
                        } catch (InterruptedException ignored) {
                        }
                    }

                } else if ("DFS".equals(selected)) {
                    dfs = new DFS(grid);
                    Coord current = start;
                    Coord stepped;
                    while (!current.equals(end) && !current.equals(new Coord(-1, -1)) && !stop) {
                        stepped = dfs.step();
                        if (stepped == null) {
                            continue;
                        }
                        publish(stepped);
                        current = stepped;
                        try {
                            Thread.sleep(timeSlider.getValue());
                        } catch (InterruptedException ignored) {
                        }
                    }

                } else if ("A*".equals(selected)) {
                    aStar = new AStar(grid);
                    Coord current = start;
                    Coord stepped;
                    while (!current.equals(end) && !current.equals(new Coord(-1, -1)) && !stop) {
                        stepped = aStar.step();
                        if (stepped == null) {
                            continue;
                        }
                        publish(stepped);
                        current = stepped;
                        try {
                            Thread.sleep(timeSlider.getValue());
                        } catch (InterruptedException ignored) {
                        }
                    }

                }

                return null;
            }

            @Override
            protected void process(java.util.List<Coord> chunks) {
                for (Coord stepped : chunks) {
                    GridHandler handler = new GridHandler(grid);
                    Grid newGrid;
                    if (previous != null) {
                        newGrid = handler.setValueFromIndex(grid, previous.getX(), previous.getY(), -2);
                    }
                    previous = stepped;
                    newGrid = handler.setValueFromIndex(grid, stepped.getX(), stepped.getY(), -1);
                    refreshGridWithNew(newGrid);
                }
            }

            @Override
            protected void done() {
                finalCost = 0;
                elapsedTime = System.currentTimeMillis() - startTime;
                int elapsedTimeInSeconds = (int) elapsedTime / 1000;
                selectLabel.setText("Path found in " + elapsedTimeInSeconds + " seconds.");
                if (bfs != null) {
                    // Traceback routine
                    Traceback traceback = new Traceback(bfs.getParentGrid());
                    LinkedList<Coord> path = traceback.trace(start, end);
                    if (path == null) {
                        bfs = null;
                        selectLabel.setText("Path not found.");
                        totalCostLabel.setText("This took " + elapsedTimeInSeconds + " s");
                        return;
                    }
                    GridHandler handler = new GridHandler(grid);
                    Grid newGrid = grid;
                    newGrid = handler.setValueFromIndex(newGrid, path.get(0).getX(), path.get(0).getY(), -3);
                    int x;
                    int y;
                    for (int i = 1; i < path.size() - 1; i++) {
                        x = path.get(i).getX();
                        y = path.get(i).getY();
                        if (startingLayout[y][x] > 1) {
                            finalCost = finalCost + startingLayout[y][x] - 1;
                        }
                        newGrid = handler.setValueFromIndex(newGrid, x, y, -5);
                    }
                    newGrid = handler.setValueFromIndex(newGrid, path.get(path.size() - 1).getX(), path.get(path.size() - 1).getY(), -4);
                    refreshGridWithNew(newGrid);
                    // End
                    bfs = null;
                } else if (dfs != null) {
                    // Traceback routine
                    Traceback traceback = new Traceback(dfs.getParentGrid());
                    LinkedList<Coord> path = traceback.trace(start, end);
                    if (path == null) {
                        dfs = null;
                        selectLabel.setText("Path not found.");
                        totalCostLabel.setText("This took " + elapsedTimeInSeconds + " s");
                        return;
                    }
                    GridHandler handler = new GridHandler(grid);
                    Grid newGrid = grid;
                    newGrid = handler.setValueFromIndex(newGrid, path.get(0).getX(), path.get(0).getY(), -3);
                    int x;
                    int y;
                    for (int i = 1; i < path.size() - 1; i++) {
                        x = path.get(i).getX();
                        y = path.get(i).getY();
                        if (startingLayout[y][x] > 1) {
                            finalCost = finalCost + startingLayout[y][x] - 1;
                        }
                        newGrid = handler.setValueFromIndex(newGrid, x, y, -5);
                    }
                    newGrid = handler.setValueFromIndex(newGrid, path.get(path.size() - 1).getX(), path.get(path.size() - 1).getY(), -4);
                    refreshGridWithNew(newGrid);
                    // End
                    dfs = null;
                    // End
                }
                selectLabel.setText("Path found in " + elapsedTimeInSeconds + " seconds.");
                totalCostLabel.setText("Final cost: " + finalCost);
            }
        };
        worker.execute();
    }

    public void refreshGridWithNew(Grid newGrid) {
        jPanel1.remove(this.grid);
        this.grid = newGrid;
        jPanel1.add(this.grid, java.awt.BorderLayout.CENTER);
        this.revalidate();
        this.repaint();
    }

    private int[][] copy2DArray(int[][] original) { // This is used to stop my grid / layout objects being accessed by reference and causing issues
        if (original == null) {
            return null;
        }
        int[][] copy = new int[original.length][];
        for (int i = 0; i < original.length; i++) {
            copy[i] = original[i].clone(); // clone each row
        }
        return copy;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel costLabel;
    private javax.swing.JSlider costSlider;
    private javax.swing.JLabel delayLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton randomiseButton;
    private javax.swing.JButton randomiseCostButton;
    private javax.swing.JComboBox<String> selectBox;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JButton solveButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JSlider timeSlider;
    private javax.swing.JLabel totalCostLabel;
    private javax.swing.JToggleButton wallToggleButton;
    // End of variables declaration//GEN-END:variables
}
