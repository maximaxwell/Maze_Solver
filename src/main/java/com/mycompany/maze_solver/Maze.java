package com.mycompany.maze_solver;

import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author maxwe
 */
public class Maze extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Maze.class.getName());
    private Grid grid = new Grid();
    private boolean startVariablesSelected = true;
    private boolean endVariablesSelected = true;
    private boolean createWall = false;
    private Coord start = new Coord();
    private Coord end = new Coord();

    /**
     * Creates new form Maze
     */
    public Maze() {
        initComponents();
        getMainPanel().setLayout(new java.awt.BorderLayout()); // so Grid fills space
        getMainPanel().add(grid, java.awt.BorderLayout.CENTER);
        mouseListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        randomiseButton = new javax.swing.JButton();
        selectBox = new javax.swing.JComboBox<>();
        selectLabel = new javax.swing.JLabel();
        solveButton = new javax.swing.JButton();
        costSlider = new javax.swing.JSlider();
        costLabel = new javax.swing.JLabel();
        wallToggleButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 500));

        randomiseButton.setText("Randomise");
        randomiseButton.setToolTipText("");
        randomiseButton.setFocusPainted(false);
        randomiseButton.setFocusable(false);
        randomiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomiseButtonActionPerformed(evt);
            }
        });

        selectBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A*", "BFS", "DFS", "Random" }));

        selectLabel.setBackground(new java.awt.Color(255, 255, 255));
        selectLabel.setForeground(new java.awt.Color(0, 0, 0));
        selectLabel.setText("Select a searching algorithm");

        solveButton.setText("Solve");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        costSlider.setMaximum(10);
        costSlider.setValue(0);
        costSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                costTextChanger(evt);
            }
        });

        costLabel.setBackground(new java.awt.Color(255, 255, 255));
        costLabel.setForeground(new java.awt.Color(0, 0, 0));
        costLabel.setText("Cost: 0");

        wallToggleButton.setText("Weighted path");
        wallToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wallToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(525, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(selectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(randomiseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(solveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(costSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(costLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wallToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(selectLabel)
                .addGap(18, 18, 18)
                .addComponent(selectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(solveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(randomiseButton)
                .addGap(18, 18, 18)
                .addComponent(costSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(costLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wallToggleButton)
                .addContainerGap(213, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void randomiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomiseButtonActionPerformed
        /*
        Maze maze = new Maze();
        maze.getMainPanel().setLayout(new java.awt.BorderLayout()); // so Grid fills space
        maze.getMainPanel().add(grid, java.awt.BorderLayout.CENTER);
        maze.pack();
        maze.setVisible(true);
        this.dispose();
         */
        jPanel1.remove(this.grid);
        this.grid = new Grid();
        jPanel1.add(this.grid, java.awt.BorderLayout.CENTER);
        this.revalidate();
        this.repaint();
        mouseListener();
    }//GEN-LAST:event_randomiseButtonActionPerformed

    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        start.reset();
        end.reset();
        selectLabel.setText("Select a starting point.");
        startVariablesSelected = false;
        endVariablesSelected = false;
    }//GEN-LAST:event_solveButtonActionPerformed

    private void costTextChanger(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_costTextChanger
        // TODO add your handling code here:
        costLabel.setText("Cost: " + costSlider.getValue());
    }//GEN-LAST:event_costTextChanger

    private void wallToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wallToggleButtonActionPerformed
        // TODO add your handling code here:
        if (wallToggleButton.getText().equals("Wall")) {
            wallToggleButton.setText("Weighted path");
            createWall = false;
        } else {
            wallToggleButton.setText("Wall");
            createWall = true;
        }
    }//GEN-LAST:event_wallToggleButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Maze().setVisible(true));
    }

    public javax.swing.JPanel getMainPanel() {
        return jPanel1;
    }

    public Grid getGrid() {
        return grid;
    }

    public void setGrid(Grid grid) {
        this.grid = grid;
    }

    public void mouseListener() {
        Grid grid = this.grid;
        GridHandler handler = new GridHandler(grid);
        this.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!grid.getBounds().contains(e.getX(), e.getY())) {
                    return; // ignore clicks outside grid
                }
                Grid newGrid = grid;
                if (startVariablesSelected == false) {
                    newGrid = handler.setValueFromMouseClick(grid, e.getX(), e.getY(), -3);
                    refreshGridWithNew(newGrid);
                    selectLabel.setText("Select an end point.");
                    startVariablesSelected = true;
                    start = newGrid.getStartPoint();
                } else if (endVariablesSelected == false) {
                    newGrid = handler.setValueFromMouseClick(grid, e.getX(), e.getY(), -4);
                    endVariablesSelected = true;
                    end = newGrid.getEndPoint();
                    selectLabel.setText("Solving...");
                    if (selectBox.getSelectedItem().toString().equals("A*")) {
                        // A* algorithm
                            
                        // End
                    } else if (selectBox.getSelectedItem().toString().equals("BFS")) {
                        // BFS algorithm
                        
                        
                        Coord current = start;
                        System.out.println(current.equals(end));
                        while (!(current.equals(end))) {
                            System.out.println("Looping");
                        }

                        
                        // End
                    } else if (selectBox.getSelectedItem().toString().equals("DFS")) {
                        // DFS algorithm

                        // End
                    } else if (selectBox.getSelectedItem().toString().equals("Random")) {
                        // Random algorithm

                        // End
                    } else {
                        System.out.println("An error has occured.");
                    }
                } else if (costSlider.getValue() != 0 && createWall == false) {
                    newGrid = handler.setValueFromMouseClick(grid, e.getX(), e.getY(), costSlider.getValue() + 1);
                } else {
                    newGrid = handler.toggleWallFromMouseClick(grid, e.getX(), e.getY());
                }
                refreshGridWithNew(newGrid);
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }

        }
        );
    }

    public void refreshGridWithNew(Grid newGrid) {
        jPanel1.remove(this.grid);
        this.grid = newGrid;
        jPanel1.add(this.grid, java.awt.BorderLayout.CENTER);
        this.revalidate();
        this.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel costLabel;
    private javax.swing.JSlider costSlider;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton randomiseButton;
    private javax.swing.JComboBox<String> selectBox;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JButton solveButton;
    private javax.swing.JToggleButton wallToggleButton;
    // End of variables declaration//GEN-END:variables
}
